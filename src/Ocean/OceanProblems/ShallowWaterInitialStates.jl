using ..ShallowWater: TurbulenceClosure, LinearDrag, ConstantViscosity

function null_init_state!(
    ::HomogeneousBox,
    ::TurbulenceClosure,
    state,
    aux,
    coord,
    t,
)
    T = eltype(state.U)
    state.U = @SVector zeros(T, 2)
    state.Œ∑ = 0
    return nothing
end

Œ∑_lsw(x, y, t) = cos(œÄ * x) * cos(œÄ * y) * cos(‚àö2 * œÄ * t)
u_lsw(x, y, t) = 2^(-0.5) * sin(œÄ * x) * cos(œÄ * y) * sin(‚àö2 * œÄ * t)
v_lsw(x, y, t) = 2^(-0.5) * cos(œÄ * x) * sin(œÄ * y) * sin(‚àö2 * œÄ * t)

function lsw_init_state!(
    m::ShallowWaterModel,
    p::HomogeneousBox,
    state,
    aux,
    coords,
    t,
)
    state.U = @SVector [
        u_lsw(coords[1], coords[2], t),
        v_lsw(coords[1], coords[2], t),
    ]

    state.Œ∑ = Œ∑_lsw(coords[1], coords[2], t)

    return nothing
end

v_lkw(x, y, t) = 0
u_lkw(x, y, t) = exp(-0.5 * y^2) * exp(-0.5 * (x - t + 5)^2)
Œ∑_lkw(x, y, t) = 1 + u_lkw(x, y, t)

function lkw_init_state!(
    m::ShallowWaterModel,
    p::HomogeneousBox,
    state,
    aux,
    coords,
    t,
)
    state.U = @SVector [
        u_lkw(coords[1], coords[2], t),
        v_lkw(coords[1], coords[2], t),
    ]

    state.Œ∑ = Œ∑_lkw(coords[1], coords[2], t)

    return nothing
end

R‚Çã(œµ) = (-1 - sqrt(1 + (2 * œÄ * œµ)^2)) / (2œµ)
R‚Çä(œµ) = (-1 + sqrt(1 + (2 * œÄ * œµ)^2)) / (2œµ)
D(œµ) =
    (R‚Çä(œµ) * (exp(R‚Çã(œµ)) - 1) + R‚Çã(œµ) * (1 - exp(R‚Çä(œµ)))) /
    (exp(R‚Çä(œµ)) - exp(R‚Çã(œµ)))
R‚ÇÇ(x‚ÇÅ, œµ) =
    (1 / D(œµ)) * (
        (
            (R‚Çä(œµ) * (exp(R‚Çã(œµ)) - 1)) * exp(R‚Çä(œµ) * x‚ÇÅ) +
            (R‚Çã(œµ) * (1 - exp(R‚Çä(œµ)))) * exp(R‚Çã(œµ) * x‚ÇÅ)
        ) / (exp(R‚Çä(œµ)) - exp(R‚Çã(œµ)))
    )
R‚ÇÅ(x‚ÇÅ, œµ) =
    (œÄ / D(œµ)) * (
        1 .+
        (
            (exp(R‚Çã(œµ)) - 1) * exp(R‚Çä(œµ) * x‚ÇÅ) .+
            (1 - exp(R‚Çä(œµ))) * exp(R‚Çã(œµ) * x‚ÇÅ)
        ) / (exp(R‚Çä(œµ)) - exp(R‚Çã(œµ)))
    )

ùí±(x‚ÇÅ, y‚ÇÅ, œµ) = R‚ÇÇ(x‚ÇÅ, œµ) * sin.(œÄ * y‚ÇÅ)
ùí∞(x‚ÇÅ, y‚ÇÅ, œµ) = -R‚ÇÅ(x‚ÇÅ, œµ) * cos.(œÄ * y‚ÇÅ)
‚Ñã(x‚ÇÅ, y‚ÇÅ, œµ, Œ≤·µñ, f‚Çí, Œ≥) =
    (R‚ÇÇ(x‚ÇÅ, œµ) / (œÄ * f‚Çí)) * Œ≥ * cos(œÄ * y‚ÇÅ) +
    (R‚ÇÅ(x‚ÇÅ, œµ) / œÄ) *
    (sin(œÄ * y‚ÇÅ) * (1.0 + Œ≤·µñ * (y‚ÇÅ - 0.5)) + (Œ≤·µñ / œÄ) * cos(œÄ * y‚ÇÅ))

function gyre_init_state!(
    m::SWModel,
    p::HomogeneousBox,
    T::LinearDrag,
    state,
    aux,
    coords,
    t,
)
    FT = eltype(state)
    œÑ‚Çí = p.œÑ‚Çí
    f‚Çí = m.f‚Çí
    Œ≤ = m.Œ≤
    LÀ£ = p.LÀ£
    L ∏ = p.L ∏
    H = p.H

    Œ≥ = T.Œª

    Œ≤·µñ = Œ≤ * L ∏ / f‚Çí
    œµ = Œ≥ / (LÀ£ * Œ≤)

    _grav::FT = grav(m.param_set)

    uÀ¢(œµ) = (œÑ‚Çí * D(œµ)) / (H * Œ≥ * œÄ)
    hÀ¢(œµ) = (f‚Çí * LÀ£ * uÀ¢(œµ)) / _grav

    u = uÀ¢(œµ) * ùí∞(coords[1] / LÀ£, coords[2] / L ∏, œµ)
    v = uÀ¢(œµ) * ùí±(coords[1] / LÀ£, coords[2] / L ∏, œµ)
    h = hÀ¢(œµ) * ‚Ñã(coords[1] / LÀ£, coords[2] / L ∏, œµ, Œ≤·µñ, f‚Çí, Œ≥)

    state.U = @SVector [H * u, H * v]

    state.Œ∑ = h

    return nothing
end

t1(x, Œ¥·µê) = cos((‚àö3 * x) / (2 * Œ¥·µê)) + (‚àö3^-1) * sin((‚àö3 * x) / (2 * Œ¥·µê))
t2(x, Œ¥·µê) = 1 - exp((-x) / (2 * Œ¥·µê)) * t1(x, Œ¥·µê)
t3(y, L ∏) = œÄ * sin(œÄ * y / L ∏)
t4(x, LÀ£, C) = C * (1 - x / LÀ£)

Œ∑_munk(x, y, LÀ£, L ∏, Œ¥·µê, C) = t4(x, LÀ£, C) * t3(y, L ∏) * t2(x, Œ¥·µê)

function gyre_init_state!(
    m::SWModel,
    p::HomogeneousBox,
    V::ConstantViscosity,
    state,
    aux,
    coords,
    t,
)
    FT = eltype(state.U)
    _grav::FT = grav(m.param_set)

    œÑ‚Çí = p.œÑ‚Çí
    f‚Çí = m.f‚Çí
    Œ≤ = m.Œ≤
    LÀ£ = p.LÀ£
    L ∏ = p.L ∏
    H = p.H

    ŒΩ = V.ŒΩ

    Œ¥·µê = (ŒΩ / Œ≤)^(1 / 3)
    C = œÑ‚Çí / (_grav * H) * (f‚Çí / Œ≤)

    state.Œ∑ = Œ∑_munk(coords[1], coords[2], LÀ£, L ∏, Œ¥·µê, C)
    state.U = @SVector zeros(T, 2)

    return nothing
end
